{"version":3,"sources":["Spinner.js","App.js","hooks/useColumns.js","index.js"],"names":["Spinner","class","ProductTable","props","products","oldRows","items","config","React","useState","sortConfig","setSortConfig","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortableData","columns","Header","accessor","getClassNamesFor","name","undefined","map","column","type","onClick","className","item","index","diffs","key1","key2","console","log","diffPercentage1","diffPercentage2","length","forEach","ele","parseFloat","toFixed","getDiff","src","url","isVerified","marketCap","floor","sales","volume","App","rows","setRows","setOldRows","loading","setLoading","getNFTs","fromTime","toTime","setState","NFT_DETAIL","graphqlQuery","operationName","query","variables","axios","method","data","headers","result","status","contracts","edges","node","stats","unsafeOpenseaImageUrl","average","totalSales","useEffect","getNFTsByTimeRange","durationInDays","now","Date","numberOfMlSeconds","getTime","addMlSeconds","newDateObj","oldDate","strNow","toISOString","strBefore","strOldDate","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b6bba9b3.chunk.js","sourcesContent":["import \"./spinner.css\"\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div class=\"center\">\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n            <div class=\"wave\"></div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './styles.css';\nimport useRows from './hooks/useRows';\nimport useColumns from './hooks/useColumns';\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Spinner from './Spinner';\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nconst ProductTable = (props) => {\n  const {products, oldRows} = props;\n  const { items, requestSort, sortConfig } = useSortableData(products);\n  const columns = useColumns();\n  const getClassNamesFor = (name) => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n  const getDiff = (item, key1, key2) => {\n    console.log(oldRows, \"0-0-0-0\")\n    let diffPercentage1 = 0;\n    let diffPercentage2 = 0;\n    if (oldRows.length > 0) {\n      oldRows.forEach(ele => {\n        if (ele.name == item.name) {\n          diffPercentage1 = (parseFloat(item[key1]) - parseFloat(ele[key1])) / parseFloat(ele[key1]) * 100 ;\n          diffPercentage2 = (parseFloat(item[key2]) - parseFloat(ele[key2])) / parseFloat(ele[key2]) * 100 ;\n        }\n      })\n    }\n    return [diffPercentage1.toFixed(2), diffPercentage2.toFixed(2)];\n  }\n  \n  return (\n    <table>\n      <thead>\n        <tr>\n          {\n            columns.map(column => (\n              <th>\n                <button\n                  type=\"button\"\n                  onClick={() => requestSort(column.accessor)}\n                  className={getClassNamesFor(column.accessor)}\n                >\n                  {column.Header}\n                </button>\n              </th>    \n            ))\n          }\n        </tr>\n      </thead>\n      <tbody>\n        {items.map((item, index) => {\n          let diffs = getDiff(item, \"sales\", \"volume\")\n          return (<tr key={index}>\n            <td>\n              <img src={item.url}/>\n              <span>{item.name}</span>\n              <span>{item.isVerified ? \"âœ…\" : \"\"}</span>\n            </td>\n            <td>{item.marketCap.toFixed(2)}</td>\n            <td>{item.floor.toFixed(2)}</td>\n            <td><div>{item.sales}</div><div className={diffs[0]>=0 ? diffs[0]!=0 ? \"green-text\" : \"grey-text\" :\"red-text\"}>{diffs[0]}%</div></td>\n            <td><div>{item.volume.toFixed(2)}</div><div className={diffs[1]>=0 ? diffs[1]!=0 ? \"green-text\" : \"grey-text\" :\"red-text\"}>{diffs[1]}%</div></td>\n          </tr>\n        )})}\n      </tbody>\n    </table>\n  );\n};\n\nexport default function App() {\n  const [rows, setRows] = useState([]);\n  const [oldRows, setOldRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const getNFTs = async (fromTime, toTime, setState) => {\n    const NFT_DETAIL = `query TrendingCollections {\n      contracts(first: 100, orderBy: SALES, orderDirection: DESC) {\n        edges {\n          node {\n            address\n            isVerified\n            ... on ERC721Contract {\n              name\n              stats(\n                timeRange: {\n                  gte: \"${fromTime}\"\n                  lt: \"${toTime}\"\n                }\n              ) {\n                totalSales\n                average\n                ceiling\n                floor\n                volume\n              }\n              symbol\n              unsafeOpenseaBannerImageUrl\n              unsafeOpenseaImageUrl\n            }\n          }\n        }\n      }\n    }`;\n    var graphqlQuery = {\n      operationName: \"TrendingCollections\",\n      query: NFT_DETAIL,\n      variables: {},\n    };\n    let result = await axios({\n      url: \"https://corsproblemsolve.herokuapp.com/https://graphql.icy.tools/graphql\",\n      method: \"post\",\n      data: graphqlQuery,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"c13f5041da834792851381b2a19fb364\",\n      },\n    });\n    let data;\n    if (result.status == \"200\") {\n      data = result.data.data.contracts.edges.map((item) => {\n        let {name, stats, unsafeOpenseaImageUrl} = item.node;\n        return {\n          name: name,\n          marketCap: stats.average * stats.totalSales,\n          floor: stats.floor,\n          sales: stats.totalSales,\n          volume: stats.volume,\n          url: unsafeOpenseaImageUrl,\n          isVerified: item.node.isVerified\n        }\n      })\n    }\n    setState(data);\n    setLoading(false);\n  }\n  React.useEffect(()=>{\n    getNFTsByTimeRange(1);\n  },[])\n\n  const getNFTsByTimeRange = (durationInDays) => {\n    setLoading(true);\n    let now = new Date();\n    var numberOfMlSeconds = now.getTime();\n    var addMlSeconds = (durationInDays * 24) * 3600 * 1000;\n    var newDateObj = new Date(numberOfMlSeconds - addMlSeconds);\n    var oldDate = new Date(numberOfMlSeconds - addMlSeconds * 2)\n    now = new Date(now);\n    let strNow = now.toISOString();\n    let strBefore = newDateObj.toISOString();\n    let strOldDate = oldDate.toISOString();\n\n    getNFTs(strBefore, strNow, setRows);\n    getNFTs(strOldDate, strBefore, setOldRows);\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"dropdown\">\n        <button className=\"dropbtn\">Select Duration</button>\n        <div className=\"dropdown-content\">\n          <button\n            type=\"button\"\n            onClick={() => getNFTsByTimeRange(1)}\n          >\n            1 Day\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => getNFTsByTimeRange(7)}\n          >\n            1 Week\n          </button>\n        </div>\n      </div>\n      {loading==false ? \n        <ProductTable\n          products={rows}\n          oldRows={oldRows}\n        /> : \n        <Spinner />\n      }\n    </div>\n  );\n}\n","import { useMemo } from \"react\";\r\n\r\nexport default function useColumns() {\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"NAME\",\r\n        accessor: \"name\"\r\n      },\r\n      {\r\n        Header: \"MARKET CAP\",\r\n        accessor: \"marketCap\"\r\n      },\r\n      {\r\n        Header: \"FLOOR\",\r\n        accessor: \"floor\"\r\n      },\r\n      {\r\n        Header: \"SALES\",\r\n        accessor: \"sales\"\r\n      },\r\n      {\r\n        Header: \"VOLUME\",\r\n        accessor: \"volume\"\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  return columns;\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}